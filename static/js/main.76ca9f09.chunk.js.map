{"version":3,"sources":["modules/lyricsCard.js","App.js","reportWebVitals.js","index.js"],"names":["LyricsDisplay","useState","songs","setSongs","title","setTitle","origLyrics","setLyrics","pinyin","setPinyin","lineLen","setLen","numRows","setRows","rows","createRows","style","setStyle","useEffect","fetch","then","res","json","data","display","flexDirection","margin","fontSize","name","artist","charLyrics","text","pinyinLyrics","curr","currMax","currRows","c","console","log","rowStyle","gridTemplateColumns","justifyContent","origLyricsRow","pinyinRow","allLyricsRows","allPinyinRows","lyricsRowsContained","i","j","push","className","buffer","forEach","row","index","placeholder","length","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76ca9f09.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nconst SONG = 0;\r\n\r\nfunction LyricsDisplay() {\r\n    const [songs, setSongs] = useState();\r\n    const [title, setTitle] = useState();\r\n    const [origLyrics, setLyrics] = useState();\r\n    const [pinyin, setPinyin] = useState();\r\n    const [lineLen, setLen] = useState();\r\n    const [numRows, setRows] = useState();\r\n    const [rows, createRows] = useState();\r\n    const [style, setStyle] = useState();\r\n    useEffect(() => {\r\n        fetch('manifest.json')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setSongs(data.songs);\r\n            return data.songs;\r\n        })\r\n        .then(songs => setTitle(\r\n            <div style={{display: 'flex', flexDirection: 'column', margin: '10px 0'}}>\r\n                <div style={{fontSize: '2em', margin: '10px 0'}}>{songs[SONG].name}</div>\r\n                <div style={{fontSize: '1.5em'}}>{songs[SONG].artist}</div>\r\n            </div>\r\n        ));\r\n    }, [])\r\n    useEffect(() => {\r\n        if (!songs || !title) return;\r\n        fetch(songs[SONG].charLyrics)\r\n        .then(res => res.text())\r\n        .then(data => setLyrics(data))\r\n        fetch(songs[SONG].pinyinLyrics)\r\n        .then(res => res.text())\r\n        .then(data => setPinyin(data))\r\n    }, [songs, title])\r\n    useEffect(() => {\r\n        if (!origLyrics || !pinyin) return;\r\n        let curr = 0;\r\n        let currMax = 0;\r\n        let currRows = 0;\r\n        for (let c of origLyrics) {\r\n            if (c !== ' ') {\r\n                curr++;\r\n            }\r\n            if (curr > currMax) currMax = curr;\r\n            if (c === '\\n') {\r\n                currRows++;\r\n                curr = 0;\r\n            }\r\n        }\r\n        console.log(currMax);\r\n        setLen(currMax-2);\r\n        setRows(currRows);\r\n        const rowStyle = {\r\n            display: \"grid\",\r\n            gridTemplateColumns: `repeat(${currMax-2}, 1fr)`,\r\n            justifyContent: \"center\"\r\n        }\r\n        setStyle(rowStyle);\r\n    }, [origLyrics, pinyin])\r\n\r\n    // Fetch is complete, proceed to next step\r\n    useEffect(() => {\r\n        if (!numRows || !lineLen || !style) return;\r\n        console.log(\"GO\")\r\n        let origLyricsRow = [];\r\n        let pinyinRow = [];\r\n        let allLyricsRows = [];\r\n        let allPinyinRows = [];\r\n        let lyricsRowsContained = [];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let c of origLyrics) {\r\n            if (c !== ' ') {\r\n                origLyricsRow.push(<div className='box' key={j}>{c}</div>);\r\n                j++;\r\n            }\r\n            if (c === '\\n') {\r\n                allLyricsRows[i] = origLyricsRow;\r\n                i++;\r\n                origLyricsRow = [];\r\n            }\r\n        }\r\n        i = j = 0;\r\n        let buffer = [];\r\n        for (let c of pinyin) {\r\n            if (c === ' ') {\r\n                pinyinRow.push(<div className='box' key={j}>{buffer}</div>);\r\n                buffer = [];\r\n            } else if (c === '\\n') {\r\n                pinyinRow.push(<div className='box' key={j}>{buffer}</div>)\r\n                allPinyinRows[i] = pinyinRow;\r\n                i++;\r\n                pinyinRow = [];\r\n                buffer = [];\r\n            } else {\r\n                buffer.push(c);\r\n            }\r\n            j++;\r\n        }\r\n        // allLyricsRows = origLyrics.map(() => {})\r\n        i = 0;\r\n        allLyricsRows.forEach((row, index) => {\r\n            let placeholder = [];\r\n            for (let i = 0; i <= (lineLen-row.length)/2; i++) {\r\n                placeholder.push(<div key={i}></div>);\r\n            }\r\n            lyricsRowsContained[index] = \r\n                <div key={index} className='big-row'>\r\n                    <div style={style} className='row'>{placeholder}{allPinyinRows[index]}</div>\r\n                    <div style={style} className='row'>{placeholder}{row}</div>\r\n                </div>\r\n        });\r\n        createRows(lyricsRowsContained);\r\n        console.log(\"here\");\r\n    }, [lineLen, numRows, style])\r\n    return (!rows ? <div>loading...</div> :\r\n        <>\r\n            <div style={{textAlign: 'center'}}>{title}<br /></div>\r\n            {rows}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LyricsDisplay","import './App.css';\nimport LyricsDisplay from './modules/lyricsCard.js'\n\nfunction App() {\n  return (\n    <LyricsDisplay />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}